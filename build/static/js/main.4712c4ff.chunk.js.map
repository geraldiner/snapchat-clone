{"version":3,"sources":["features/cameraSlice.js","components/WebcamCapture.js","firebase.js","components/Preview.js","features/appSlice.js","components/Message.js","components/Messages.js","components/MessageView.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","status","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstrants","width","height","facingMode","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","videoConstraints","onClick","fontSize","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","storage","getAuth","getStorage","Preview","useSelector","useEffect","replace","sendPhoto","a","id","uuid","storageRef","uploadString","uploadTask","getDownloadURL","then","downloadURL","getMetadata","timeCreated","addDoc","collection","imageUrl","username","read","timestamp","console","log","Close","TextFields","Create","Note","MusicNote","AttachFile","Crop","Timer","src","alt","Send","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectSelectedImage","Message","profilePic","open","setDoc","doc","merge","Avatar","date","Date","toUTCString","StopRounded","Messages","useState","messages","setMessages","getDocsFromFireStore","q","query","orderBy","getDocs","querySnapshot","snapshots","forEach","data","Search","type","placeholder","ChatBubble","map","MessageView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","App","exact","path","component","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4712c4ff.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n\tcameraImage: null,\r\n\tstatus: \"idle\",\r\n};\r\n\r\nexport const cameraSlice = createSlice({\r\n\tname: \"camera\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetCameraImage: (state, action) => {\r\n\t\t\tstate.cameraImage = action.payload;\r\n\t\t},\r\n\t\tresetCameraImage: state => {\r\n\t\t\tstate.cameraImage = null;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = state => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import React, { useRef, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCameraImage } from \"../features/cameraSlice\";\r\nimport Webcam from \"react-webcam\";\r\nimport RadioButtonUncheckedIcon from \"@mui/icons-material/RadioButtonUnchecked\";\r\n\r\nimport \"./WebcamCapture.css\";\r\n\r\nconst videoConstrants = {\r\n\twidth: 250,\r\n\theight: 400,\r\n\tfacingMode: \"user\",\r\n};\r\n\r\nconst WebcamCapture = () => {\r\n\tconst webcamRef = useRef(null);\r\n\tconst dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n\r\n\tconst capture = useCallback(() => {\r\n\t\tconst imageSrc = webcamRef.current.getScreenshot();\r\n\t\tdispatch(setCameraImage(imageSrc));\r\n\t\thistory.push(\"/preview\");\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [webcamRef]);\r\n\r\n\treturn (\r\n\t\t<div className=\"webcam-capture\">\r\n\t\t\t<Webcam\r\n\t\t\t\taudio={false}\r\n\t\t\t\theight={videoConstrants.height}\r\n\t\t\t\tref={webcamRef}\r\n\t\t\t\tscreenshotFormat=\"image/jpeg\"\r\n\t\t\t\twidth={videoConstrants.width}\r\n\t\t\t\tvideoConstraints={videoConstrants}\r\n\t\t\t/>\r\n\t\t\t<RadioButtonUncheckedIcon className=\"webcam-capture__button\" onClick={capture} fontSize=\"large\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default WebcamCapture;\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyBs6bejXhvw3Pc9VkOsyqueVoDlXt7yA_Q\",\r\n\tauthDomain: \"snapchat-clone-9001.firebaseapp.com\",\r\n\tprojectId: \"snapchat-clone-9001\",\r\n\tstorageBucket: \"snapchat-clone-9001.appspot.com\",\r\n\tmessagingSenderId: \"967823816936\",\r\n\tappId: \"1:967823816936:web:3b5481ca867d12edd8715d\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst storage = getStorage(app);\r\n\r\nexport { db, auth, storage };\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { selectCameraImage, resetCameraImage } from \"../features/cameraSlice\";\r\nimport { Close, TextFields, Create, Note, MusicNote, AttachFile, Crop, Timer, Send } from \"@mui/icons-material\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport { ref, uploadString, getDownloadURL, getMetadata } from \"firebase/storage\";\r\nimport { db, storage } from \"../firebase\";\r\n\r\nimport \"./Preview.css\";\r\n\r\nconst Preview = () => {\r\n\tconst cameraImage = useSelector(selectCameraImage);\r\n\tconst history = useHistory();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!cameraImage) {\r\n\t\t\thistory.replace(\"/\");\r\n\t\t}\r\n\t}, [cameraImage, history]);\r\n\r\n\tconst closePreview = () => {\r\n\t\tdispatch(resetCameraImage());\r\n\t};\r\n\r\n\tconst sendPhoto = async () => {\r\n\t\tconst id = uuid();\r\n\t\tconst storageRef = ref(storage, `photos/${id}`);\r\n\t\ttry {\r\n\t\t\tconst uploadTask = await uploadString(storageRef, cameraImage, \"data_url\");\r\n\t\t\tgetDownloadURL(uploadTask.ref).then(async downloadURL => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst timeCreated = await (await getMetadata(storageRef)).timeCreated;\r\n\t\t\t\t\tawait addDoc(collection(db, \"photos\"), {\r\n\t\t\t\t\t\timageUrl: downloadURL,\r\n\t\t\t\t\t\tusername: \"Mr. Meeseeks\",\r\n\t\t\t\t\t\tread: false,\r\n\t\t\t\t\t\t// profilePic,\r\n\t\t\t\t\t\ttimestamp: timeCreated,\r\n\t\t\t\t\t});\r\n\t\t\t\t\thistory.push(\"/messages\");\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"preview\">\r\n\t\t\t<Close onClick={closePreview} className=\"preview__close\" />\r\n\t\t\t<div className=\"preview__toolbarRight\">\r\n\t\t\t\t<TextFields />\r\n\t\t\t\t<Create />\r\n\t\t\t\t<Note />\r\n\t\t\t\t<MusicNote />\r\n\t\t\t\t<AttachFile />\r\n\t\t\t\t<Crop />\r\n\t\t\t\t<Timer />\r\n\t\t\t</div>\r\n\t\t\t<img src={cameraImage} alt=\"\" />\r\n\t\t\t<div onClick={sendPhoto} className=\"preview__footer\">\r\n\t\t\t\t<h2>Send Now</h2>\r\n\t\t\t\t<Send className=\"preview__sendIcon\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Preview;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n\tuser: null,\n\tselectedImage: null,\n};\n\nexport const appSlice = createSlice({\n\tname: \"app\",\n\tinitialState,\n\treducers: {\n\t\tlogin: (state, action) => {\n\t\t\tstate.user = action.payload;\n\t\t},\n\t\tlogout: state => {\n\t\t\tstate.user = null;\n\t\t},\n\t\tselectImage: (state, action) => {\n\t\t\tstate.selectedImage = action.payload;\n\t\t},\n\t\tresetImage: state => {\n\t\t\tstate.selectedImage = null;\n\t\t},\n\t},\n});\n\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\n\nexport const selectUser = state => state.app.user;\nexport const selectSelectedImage = state => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { Avatar } from \"@mui/material\";\r\nimport { StopRounded } from \"@mui/icons-material\";\r\nimport ReactTimeago from \"react-timeago\";\r\nimport { selectImage } from \"../features/appSlice\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport \"./Message.css\";\r\n\r\nconst Message = ({ id, username, timestamp, imageUrl, read, profilePic }) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n\r\n\tconst open = async () => {\r\n\t\tif (!read) {\r\n\t\t\tdispatch(selectImage(imageUrl));\r\n\t\t\tawait setDoc(doc(db, \"photos\", id), { read: true }, { merge: true });\r\n\r\n\t\t\thistory.push(\"/messages/view\");\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div onClick={open} className=\"message\">\r\n\t\t\t<Avatar className=\"message__avatar\" src={profilePic} />\r\n\t\t\t<div className=\"message__info\">\r\n\t\t\t\t<h4>{username}</h4>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{!read && \"Tap to view - \"}\r\n\t\t\t\t\t<ReactTimeago date={new Date(timestamp).toUTCString()} />\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t{!read && <StopRounded className=\"message__readIcon\" />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport { Search, ChatBubble } from \"@mui/icons-material\";\r\nimport { collection, query, orderBy, getDocs } from \"firebase/firestore\";\r\nimport Message from \"./Message\";\r\nimport { db } from \"../firebase\";\r\nimport \"./Messages.css\";\r\n\r\nconst Messages = () => {\r\n\tconst [messages, setMessages] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getDocsFromFireStore = async () => {\r\n\t\t\tconst q = query(collection(db, \"photos\"), orderBy(\"timestamp\", \"desc\"));\r\n\t\t\tconst querySnapshot = await getDocs(q);\r\n\t\t\tlet snapshots = [];\r\n\t\t\tquerySnapshot.forEach(doc => {\r\n\t\t\t\tsnapshots.push({ id: doc.id, data: doc.data() });\r\n\t\t\t});\r\n\t\t\tsetMessages(snapshots);\r\n\t\t};\r\n\t\tgetDocsFromFireStore();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"messages\">\r\n\t\t\t<div className=\"messages__header\">\r\n\t\t\t\t<Avatar className=\"messages__avatar\" />\r\n\t\t\t\t<div className=\"messages__search\">\r\n\t\t\t\t\t<Search />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Search contacts\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<ChatBubble className=\"messages__chatIcon\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"messages__wrapper\">\r\n\t\t\t\t{messages.map(({ id, data: { profilePic, username, timestamp, imageUrl, read } }) => {\r\n\t\t\t\t\treturn <Message key={id} id={id} username={username} timestamp={timestamp} imageUrl={imageUrl} read={read} profilePic={profilePic} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Messages;\r\n","import React, { useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { selectSelectedImage } from \"../features/appSlice\";\r\nimport \"./MessageView.css\";\r\n\r\nconst MessageView = () => {\r\n\tconst selectedImage = useSelector(selectSelectedImage);\r\n\tconst history = useHistory();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!selectedImage) {\r\n\t\t\texit();\r\n\t\t}\r\n\t}, [selectedImage]);\r\n\r\n\tconst exit = () => {\r\n\t\thistory.replace(\"/messages\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"message-view\">\r\n\t\t\t<img src={selectedImage} onClick={exit} alt=\"\" />\r\n\t\t\t<div className=\"message-view__timer\">\r\n\t\t\t\t<CountdownCircleTimer\r\n\t\t\t\t\tisPlaying\r\n\t\t\t\t\tduration={10}\r\n\t\t\t\t\tstrokeWidth={6}\r\n\t\t\t\t\tsize={50}\r\n\t\t\t\t\tcolors={[\r\n\t\t\t\t\t\t[\"#004477\", 0.33],\r\n\t\t\t\t\t\t[\"#F7B801\", 0.33],\r\n\t\t\t\t\t\t[\"#A30000\", 0.33],\r\n\t\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t\t{({ remainingTime }) => {\r\n\t\t\t\t\t\tif (remainingTime === 0) {\r\n\t\t\t\t\t\t\texit();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn remainingTime;\r\n\t\t\t\t\t}}\r\n\t\t\t\t</CountdownCircleTimer>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MessageView;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport WebcamCapture from \"./components/WebcamCapture\";\nimport Preview from \"./components/Preview\";\nimport Messages from \"./components/Messages\";\nimport MessageView from \"./components/MessageView\";\n\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"app__body\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={WebcamCapture} />\n\t\t\t\t\t\t<Route exact path=\"/preview\" component={Preview} />\n\t\t\t\t\t\t<Route exact path=\"/messages\" component={Messages} />\n\t\t\t\t\t\t<Route exact path=\"/messages/view\" component={MessageView} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReducer from \"../features/appSlice\";\nimport cameraReducer from \"../features/cameraSlice\";\n\nexport const store = configureStore({\n\treducer: {\n\t\tapp: appReducer,\n\t\tcamera: cameraReducer,\n\t},\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}