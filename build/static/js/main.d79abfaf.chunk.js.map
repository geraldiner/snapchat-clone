{"version":3,"sources":["features/appSlice.js","firebase.js","components/Login.js","features/cameraSlice.js","components/WebcamCapture.js","components/Preview.js","components/Message.js","components/Messages.js","components/MessageView.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","user","selectedImage","reducers","login","state","action","payload","logout","selectImage","resetImage","actions","selectUser","app","selectSelectedImage","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","auth","getAuth","storage","getStorage","provider","GoogleAuthProvider","Login","dispatch","useDispatch","handleLogin","a","signInWithPopup","then","result","credentialFromResult","accessToken","username","displayName","profilePic","photoURL","id","uid","catch","error","alert","message","className","src","alt","Button","variant","onClick","cameraSlice","cameraImage","status","setCameraImage","resetCameraImage","selectCameraImage","camera","videoConstrants","width","height","facingMode","WebcamCapture","webcamRef","useRef","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","audio","ref","screenshotFormat","videoConstraints","fontSize","Preview","useSelector","useEffect","replace","sendPhoto","uuid","storageRef","uploadString","uploadTask","getDownloadURL","downloadURL","getMetadata","timeCreated","addDoc","collection","imageUrl","read","timestamp","console","log","Close","TextFields","Create","Note","MusicNote","AttachFile","Crop","Timer","Send","Message","open","setDoc","doc","merge","Avatar","date","Date","toUTCString","StopRounded","Messages","useState","messages","setMessages","getDocsFromFireStore","q","query","orderBy","getDocs","querySnapshot","snapshots","forEach","data","signOut","Search","type","placeholder","ChatBubble","map","MessageView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","App","onAuthStateChanged","exact","path","component","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d79abfaf.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n\tuser: null,\n\tselectedImage: null,\n};\n\nexport const appSlice = createSlice({\n\tname: \"app\",\n\tinitialState,\n\treducers: {\n\t\tlogin: (state, action) => {\n\t\t\tstate.user = action.payload;\n\t\t},\n\t\tlogout: state => {\n\t\t\tstate.user = null;\n\t\t},\n\t\tselectImage: (state, action) => {\n\t\t\tstate.selectedImage = action.payload;\n\t\t},\n\t\tresetImage: state => {\n\t\t\tstate.selectedImage = null;\n\t\t},\n\t},\n});\n\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\n\nexport const selectUser = state => state.app.user;\nexport const selectSelectedImage = state => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyBs6bejXhvw3Pc9VkOsyqueVoDlXt7yA_Q\",\r\n\tauthDomain: \"snapchat-clone-9001.firebaseapp.com\",\r\n\tprojectId: \"snapchat-clone-9001\",\r\n\tstorageBucket: \"snapchat-clone-9001.appspot.com\",\r\n\tmessagingSenderId: \"967823816936\",\r\n\tappId: \"1:967823816936:web:3b5481ca867d12edd8715d\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst storage = getStorage(app);\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport { db, auth, storage, provider };\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { GoogleAuthProvider, signInWithPopup } from \"@firebase/auth\";\r\nimport { auth, provider } from \"../firebase\";\r\nimport { login } from \"../features/appSlice\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst Login = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleLogin = async () => {\r\n\t\tsignInWithPopup(auth, provider)\r\n\t\t\t.then(result => {\r\n\t\t\t\tconst credential = GoogleAuthProvider.credentialFromResult(result);\r\n\t\t\t\tconst token = credential.accessToken;\r\n\t\t\t\tdispatch(\r\n\t\t\t\t\tlogin({\r\n\t\t\t\t\t\tusername: result.user.displayName,\r\n\t\t\t\t\t\tprofilePic: result.user.photoURL,\r\n\t\t\t\t\t\tid: result.user.uid,\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\talert(error.message);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"login\">\r\n\t\t\t<div className=\"login__container\">\r\n\t\t\t\t<img src=\"https://twemoji.maxcdn.com/2/svg/1f47b.svg\" alt=\"logo\" />\r\n\t\t\t\t<Button variant=\"outlined\" onClick={handleLogin}>\r\n\t\t\t\t\tLog In\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n\tcameraImage: null,\r\n\tstatus: \"idle\",\r\n};\r\n\r\nexport const cameraSlice = createSlice({\r\n\tname: \"camera\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetCameraImage: (state, action) => {\r\n\t\t\tstate.cameraImage = action.payload;\r\n\t\t},\r\n\t\tresetCameraImage: state => {\r\n\t\t\tstate.cameraImage = null;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = state => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import React, { useRef, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCameraImage } from \"../features/cameraSlice\";\r\nimport Webcam from \"react-webcam\";\r\nimport RadioButtonUncheckedIcon from \"@mui/icons-material/RadioButtonUnchecked\";\r\n\r\nimport \"./WebcamCapture.css\";\r\n\r\nconst videoConstrants = {\r\n\twidth: 250,\r\n\theight: 400,\r\n\tfacingMode: \"user\",\r\n};\r\n\r\nconst WebcamCapture = () => {\r\n\tconst webcamRef = useRef(null);\r\n\tconst dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n\r\n\tconst capture = useCallback(() => {\r\n\t\tconst imageSrc = webcamRef.current.getScreenshot();\r\n\t\tdispatch(setCameraImage(imageSrc));\r\n\t\thistory.push(\"/preview\");\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [webcamRef]);\r\n\r\n\treturn (\r\n\t\t<div className=\"webcam-capture\">\r\n\t\t\t<Webcam\r\n\t\t\t\taudio={false}\r\n\t\t\t\theight={videoConstrants.height}\r\n\t\t\t\tref={webcamRef}\r\n\t\t\t\tscreenshotFormat=\"image/jpeg\"\r\n\t\t\t\twidth={videoConstrants.width}\r\n\t\t\t\tvideoConstraints={videoConstrants}\r\n\t\t\t/>\r\n\t\t\t<RadioButtonUncheckedIcon className=\"webcam-capture__button\" onClick={capture} fontSize=\"large\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default WebcamCapture;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { selectUser } from \"../features/appSlice\";\r\nimport { selectCameraImage, resetCameraImage } from \"../features/cameraSlice\";\r\nimport { Close, TextFields, Create, Note, MusicNote, AttachFile, Crop, Timer, Send } from \"@mui/icons-material\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport { ref, uploadString, getDownloadURL, getMetadata } from \"firebase/storage\";\r\nimport { db, storage } from \"../firebase\";\r\n\r\nimport \"./Preview.css\";\r\n\r\nconst Preview = () => {\r\n\tconst cameraImage = useSelector(selectCameraImage);\r\n\tconst history = useHistory();\r\n\tconst dispatch = useDispatch();\r\n\tconst user = useSelector(selectUser);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!cameraImage) {\r\n\t\t\thistory.replace(\"/\");\r\n\t\t}\r\n\t}, [cameraImage, history]);\r\n\r\n\tconst closePreview = () => {\r\n\t\tdispatch(resetCameraImage());\r\n\t};\r\n\r\n\tconst sendPhoto = async () => {\r\n\t\tconst id = uuid();\r\n\t\tconst storageRef = ref(storage, `photos/${id}`);\r\n\t\ttry {\r\n\t\t\tconst uploadTask = await uploadString(storageRef, cameraImage, \"data_url\");\r\n\t\t\tgetDownloadURL(uploadTask.ref).then(async downloadURL => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst timeCreated = await (await getMetadata(storageRef)).timeCreated;\r\n\t\t\t\t\tawait addDoc(collection(db, \"photos\"), {\r\n\t\t\t\t\t\timageUrl: downloadURL,\r\n\t\t\t\t\t\tusername: user.username,\r\n\t\t\t\t\t\tread: false,\r\n\t\t\t\t\t\tprofilePic: user.profilePic,\r\n\t\t\t\t\t\ttimestamp: timeCreated,\r\n\t\t\t\t\t});\r\n\t\t\t\t\thistory.push(\"/messages\");\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"preview\">\r\n\t\t\t<Close onClick={closePreview} className=\"preview__close\" />\r\n\t\t\t<div className=\"preview__toolbarRight\">\r\n\t\t\t\t<TextFields />\r\n\t\t\t\t<Create />\r\n\t\t\t\t<Note />\r\n\t\t\t\t<MusicNote />\r\n\t\t\t\t<AttachFile />\r\n\t\t\t\t<Crop />\r\n\t\t\t\t<Timer />\r\n\t\t\t</div>\r\n\t\t\t<img src={cameraImage} alt=\"\" />\r\n\t\t\t<div onClick={sendPhoto} className=\"preview__footer\">\r\n\t\t\t\t<h2>Send Now</h2>\r\n\t\t\t\t<Send className=\"preview__sendIcon\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { Avatar } from \"@mui/material\";\r\nimport { StopRounded } from \"@mui/icons-material\";\r\nimport ReactTimeago from \"react-timeago\";\r\nimport { selectImage } from \"../features/appSlice\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\n\r\nimport { db } from \"../firebase\";\r\n\r\nimport \"./Message.css\";\r\n\r\nconst Message = ({ id, username, timestamp, imageUrl, read, profilePic }) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n\r\n\tconst open = async () => {\r\n\t\tif (!read) {\r\n\t\t\tdispatch(selectImage(imageUrl));\r\n\t\t\tawait setDoc(doc(db, \"photos\", id), { read: true }, { merge: true });\r\n\r\n\t\t\thistory.push(\"/messages/view\");\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div onClick={open} className=\"message\">\r\n\t\t\t<Avatar className=\"message__avatar\" src={profilePic} />\r\n\t\t\t<div className=\"message__info\">\r\n\t\t\t\t<h4>{username}</h4>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{!read && \"Tap to view - \"}\r\n\t\t\t\t\t<ReactTimeago date={new Date(timestamp).toUTCString()} />\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t{!read && <StopRounded className=\"message__readIcon\" />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport { Search, ChatBubble, RadioButtonUnchecked } from \"@mui/icons-material\";\r\nimport { collection, query, orderBy, getDocs } from \"firebase/firestore\";\r\nimport { signOut } from \"@firebase/auth\";\r\nimport { selectUser } from \"../features/appSlice\";\r\nimport { resetCameraImage } from \"../features/cameraSlice\";\r\n\r\nimport Message from \"./Message\";\r\nimport { db, auth } from \"../firebase\";\r\nimport \"./Messages.css\";\r\n\r\nconst Messages = () => {\r\n\tconst [messages, setMessages] = useState([]);\r\n\tconst user = useSelector(selectUser);\r\n\tconst dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n\r\n\tconst takePic = () => {\r\n\t\tdispatch(resetCameraImage());\r\n\t\thistory.push(\"/\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getDocsFromFireStore = async () => {\r\n\t\t\tconst q = query(collection(db, \"photos\"), orderBy(\"timestamp\", \"desc\"));\r\n\t\t\tconst querySnapshot = await getDocs(q);\r\n\t\t\tlet snapshots = [];\r\n\t\t\tquerySnapshot.forEach(doc => {\r\n\t\t\t\tsnapshots.push({ id: doc.id, data: doc.data() });\r\n\t\t\t});\r\n\t\t\tsetMessages(snapshots);\r\n\t\t};\r\n\t\tgetDocsFromFireStore();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"messages\">\r\n\t\t\t<div className=\"messages__header\">\r\n\t\t\t\t<Avatar src={user.profilePic} onClick={() => signOut(auth)} className=\"messages__avatar\" />\r\n\t\t\t\t<div className=\"messages__search\">\r\n\t\t\t\t\t<Search className=\"messages__searchIcon\" />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Search contacts\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<ChatBubble className=\"messages__chatIcon\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"messages__wrapper\">\r\n\t\t\t\t{messages.map(({ id, data: { profilePic, username, timestamp, imageUrl, read } }) => {\r\n\t\t\t\t\treturn <Message key={id} id={id} username={username} timestamp={timestamp} imageUrl={imageUrl} read={read} profilePic={profilePic} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\r\n\t\t\t<RadioButtonUnchecked className=\"messages__takePicIcon\" onClick={takePic} fontSize=\"large\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Messages;\r\n","import React, { useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { selectSelectedImage } from \"../features/appSlice\";\r\nimport \"./MessageView.css\";\r\n\r\nconst MessageView = () => {\r\n\tconst selectedImage = useSelector(selectSelectedImage);\r\n\tconst history = useHistory();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!selectedImage) {\r\n\t\t\texit();\r\n\t\t}\r\n\t}, [selectedImage]);\r\n\r\n\tconst exit = () => {\r\n\t\thistory.replace(\"/messages\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"message-view\">\r\n\t\t\t<img src={selectedImage} onClick={exit} alt=\"\" />\r\n\t\t\t<div className=\"message-view__timer\">\r\n\t\t\t\t<CountdownCircleTimer\r\n\t\t\t\t\tisPlaying\r\n\t\t\t\t\tduration={10}\r\n\t\t\t\t\tstrokeWidth={6}\r\n\t\t\t\t\tsize={50}\r\n\t\t\t\t\tcolors={[\r\n\t\t\t\t\t\t[\"#004477\", 0.33],\r\n\t\t\t\t\t\t[\"#F7B801\", 0.33],\r\n\t\t\t\t\t\t[\"#A30000\", 0.33],\r\n\t\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t\t{({ remainingTime }) => {\r\n\t\t\t\t\t\tif (remainingTime === 0) {\r\n\t\t\t\t\t\t\texit();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn remainingTime;\r\n\t\t\t\t\t}}\r\n\t\t\t\t</CountdownCircleTimer>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MessageView;\r\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { onAuthStateChanged } from \"@firebase/auth\";\nimport { selectUser, login, logout } from \"./features/appSlice\";\nimport { auth } from \"./firebase\";\n\nimport Login from \"./components/Login\";\nimport WebcamCapture from \"./components/WebcamCapture\";\nimport Preview from \"./components/Preview\";\nimport Messages from \"./components/Messages\";\nimport MessageView from \"./components/MessageView\";\n\nimport \"./App.css\";\n\nfunction App() {\n\tconst user = useSelector(selectUser);\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tonAuthStateChanged(auth, user => {\n\t\t\tif (user) {\n\t\t\t\tdispatch(\n\t\t\t\t\tlogin({\n\t\t\t\t\t\tusername: user.displayName,\n\t\t\t\t\t\tprofilePic: user.photoURL,\n\t\t\t\t\t\tid: user.uid,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tdispatch(logout());\n\t\t\t}\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Router>\n\t\t\t\t{!user ? (\n\t\t\t\t\t<Login />\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<img className=\"app__logo\" src=\"https://twemoji.maxcdn.com/2/svg/1f47b.svg\" alt=\"logo\" />\n\t\t\t\t\t\t<div className=\"app__body\">\n\t\t\t\t\t\t\t<div className=\"app__bodyBackground\">\n\t\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={WebcamCapture} />\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/preview\" component={Preview} />\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/messages\" component={Messages} />\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/messages/view\" component={MessageView} />\n\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport appReducer from \"../features/appSlice\";\nimport cameraReducer from \"../features/cameraSlice\";\n\nexport const store = configureStore({\n\treducer: {\n\t\tapp: appReducer,\n\t\tcamera: cameraReducer,\n\t},\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}